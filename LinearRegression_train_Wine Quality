import org.apache.spark.sql.SparkSession
import org.apache.spark.ml.regression.LinearRegression
import org.apache.spark.ml.feature.VectorAssembler
import org.apache.spark.ml.linalg.Vectors
import breeze.linalg._
import breeze.numerics._

object WineQualityRegression {
  def main(args: Array[String]): Unit = {
    val spark = SparkSession.builder()
      .appName("Wine Quality Regression")
      .getOrCreate()

    // Загрузка данных
    val data = spark.read
      .option("header", "true")
      .option("inferSchema", "true")
      .option("sep", ";")
      .csv("https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv")

    // Подготовка данных
    val featureColumns = Array("fixed_acidity", "volatile_acidity", "citric_acid", "residual_sugar", "chlorides", "free_sulfur_dioxide", "total_sulfur_dioxide", "density", "pH", "sulphates", "alcohol")
    val assembler = new VectorAssembler()
      .setInputCols(featureColumns)
      .setOutputCol("features")
    val output = assembler.transform(data)
      .select(col("quality").cast("double").as("label"), col("features"))

    // Разделение данных
    val Array(trainingData, testData) = output.randomSplit(Array(0.8, 0.2))

    // Обучение модели
    val lr = new LinearRegression().setMaxIter(10).setRegParam(0.3).setElasticNetParam(0.8)
    val model = lr.fit(trainingData)

    // Предсказания
    val predictions = model.transform(testData)
    predictions.select("prediction", "label", "features").show()

    // Анализ ошибки с помощью Breeze
    val predictionAndLabels = predictions.select("prediction", "label").as[(Double, Double)].collect()
    val mse = mean(predictionAndLabels.map { case (p, l) => pow(p - l, 2) })

    println(s"Mean Squared Error: $mse")

    spark.stop()
  }
}
